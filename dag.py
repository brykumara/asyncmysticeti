import networkx as nx
import matplotlib.pyplot as plt

# Define the dependencies as per the provided log format
dependencies = {
    '2.1': ['1.1', '1.2', '1.3'],
    '2.2': ['1.1', '1.3', '1.4'],
    '2.3': ['1.2', '1.3', '1.4'],
    '2.4': ['1.1', '1.2', '1.3'],
    '3.1': ['2.1', '2.3', '2.4'],
    '3.2': ['2.1', '2.2', '2.3'],
    '3.3': ['2.2', '2.3', '2.4'],
    '3.4': ['2.1', '2.2', '2.3'],
    '4.1': ['3.1', '3.2', '3.3'],
    '4.2': ['3.1', '3.3', '3.4'],
    '4.3': ['3.2', '3.3', '3.4'],
    '4.4': ['3.1', '3.2', '3.3'],
    '5.1': ['3.1', '3.2', '3.3'],
    '5.2': ['3.1', '3.2', '3.3'],
    '5.3': ['3.1', '3.2', '3.3'],
    '5.4': ['3.1', '3.2', '3.3'],
    '6.1': ['3.1', '3.2', '3.3'],
    '6.2': ['3.1', '3.2', '3.3'],
    '6.3': ['3.1', '3.2', '3.3'],
    '6.4': ['3.1', '3.2', '3.3'],
    '7.1': ['3.1', '3.2', '3.3'],
    '7.2': ['3.1', '3.2', '3.3'],
    '7.3': ['3.1', '3.2', '3.3'],
    '7.4': ['3.1', '3.2', '3.3'],
    '8.1': ['3.1', '3.2', '3.3'],
    '8.2': ['3.1', '3.2', '3.3'],
    '8.3': ['3.1', '3.2', '3.3'],
    '8.4': ['3.1', '3.2', '3.3'],
    '9.1': ['3.1', '3.2', '3.3'],
    '9.2': ['3.1', '3.2', '3.3'],
    '9.3': ['3.1', '3.2', '3.3'],
    '9.4': ['3.1', '3.2', '3.3'],
    '10.1': ['9.1', '9.2', '9.3', '9.4'],
    '10.2': ['9.1', '9.2', '9.3', '9.4'],
    '10.3': ['9.1', '9.2', '9.3', '9.4'],
    '10.4': ['9.1', '9.2', '9.3', '9.4'],
    '11.1': ['10.1', '10.2', '10.3', '10.4'],
    '11.2': ['3.1', '3.2', '3.3'],
    '11.3': ['3.1', '3.2', '3.3'],
    '11.4': ['3.1', '3.2', '3.3'],
    '12.1': ['3.1', '3.2', '3.3'],
    '12.2': ['3.1', '3.2', '3.3'],
    '12.3': ['3.1', '3.2', '3.3'],
    '12.4': ['3.1', '3.2', '3.3'],


}

# Initialize a directed graph
G = nx.DiGraph()

# Add reversed edges based on dependencies
for block, refs in dependencies.items():
    for ref in refs:
        G.add_edge(block, ref)

# Define positions for nodes in a layered layout
pos = {
    '1.1': (0, 4), '1.2': (0, 3), '1.3': (0, 2), '1.4': (0, 1),
    '2.1': (1, 4), '2.2': (1, 3), '2.3': (1, 2), '2.4': (1, 1),
    '3.1': (2, 4), '3.2': (2, 3), '3.3': (2, 2), '3.4': (2, 1),
    '4.1': (3, 4), '4.2': (3, 3), '4.3': (3, 2), '4.4': (3, 1)
}

# Draw the graph
plt.figure(figsize=(12, 8))
nx.draw(G, pos, with_labels=True, node_size=3000, node_color='lightblue', font_size=10, font_weight='bold', arrows=True, arrowstyle='-|>', arrowsize=20)
plt.title('Directed Acyclic Graph of Blocks')
plt.show()

